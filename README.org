* Refile
一个受IPFS启发的Web友好的自托管微服务,
以HTTP为接口, 提供基于内容寻址的资源上传和基于引用计数的垃圾回收功能.

由于Refile是在存储后端不可知的假设下开发的, 通过Refile上传的文件会丢失它的文件名和MIME type等元数据.
如需保留相关元数据, 则应该通过其他服务来实现.

** Quickstart
#+BEGIN_SRC sh
docker run --detach --publish 8080:8080 blackglory/refile
#+END_SRC

** Install
*** 从源代码运行
可以使用环境变量 =REFILE_HOST= 和 =REFILE_PORT= 决定服务器监听的地址和端口, 默认值为localhost和8080.

#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/refile
cd log
yarn install
yarn build
yarn bundle
yarn --silent start
#+END_SRC

*** Docker
#+BEGIN_SRC sh
docker run \
  --detach \
  --publish 8080:8080 \
  blackglory/refile
#+END_SRC

**** 从源代码构建
#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/refile
cd refile
yarn install
yarn docker:build
#+END_SRC

**** Recipes
***** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  refile:
    image: 'blackglory/refile'
    restart: always
    environment:
      - REFILE_ADMIN_PASSWORD=password
    volumes:
      - 'refile-database:/data'
      - 'reifle-storage:/storage'
    ports:
      - '8080:8080'

volumes:
  refile-database:
  refile-storage:
#+END_SRC

** API
所有API中的namespace和id都需要满足此正则表达式: =^[a-zA-Z0-9\.\-_]{0,255}$=

*** PubliC
**** upload file
=PUT /refile/files/<hash>=

上传文件.

*被上传的文件必须先通过[[set reference]]建立相应的引用关系, 如果文件的引用数为零, 上传会被拒绝.*

上传文件时需要提供三个参数:
- =file=: 需要上传的二进制文件, 由FormData的file字段提供.
  一次只能上传一个文件, 表单的编码必须为 =multipart/form-data=.
- =hashList=: 分段hash列表, 由ForumData的多个名为hashList的同名字段提供.
  将文件按512KiB为切割点进行分段, 计算出每段内容的SHA-256 hash, 将其16进制字符串形式保存为有序数组, 该数组即为hashList.
- =hash=: 文件的最终hash, 在URL里提供.
  将hashList的字符串连接起来, 计算其SHA-256 hash, 其16进制字符串形式就是文件的最终hash.

上传参数设计得如此复杂是为了能让Refile尽早拒绝错误和重复的文件.
由于参数过于复杂, 因此几乎无法通过curl, fetch等低级客户端/API进行使用,
实现客户端时可参考[[https://github.com/BlackGlory/refile-js][refile-js]]的实现.

上传的文件服务器上不存在时, 以201结束.
上传的文件已经在服务器上存在时, 中断上传, 以204结束.
文件hash校验错误时, 返回409.

**** get file info
=GET /refile/files/<hash>=

获取与资源相关的信息.

#+BEGIN_SRC ts
{
  hash: string
  location: string | null // 未上传时, location为null
  references: number
}
#+END_SRC

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/refile/files/$hash"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/refile/files/${hash}`).then(res => res.json())
#+END_SRC

**** get file location
=GET /refile/files/<hash>/location=

通过hash获取文件的location.
它与get file info是冗余的, 但性能更好.

如果location存在, 以文本形式返回location.
如果location不存在, 返回404.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/refile/files/$hash/location"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/refile/files/${hash}/location`).then(res => res.text())
#+END_SRC

**** <<set reference>>
=PUT /refile/namespaces/<namespace>/items/<id>/files/<hash>=

设置资源hash与引用的关系, 此操作并不需要相关的文件已被上传.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  "http://localhost:8080/refile/namespaces/$namespace/items/$id/files/$hash"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/refile/namespaces/${namespace}/items/${id}/files/${hash}`)
#+END_SRC

**** remove reference
=DELETE /refile/namespaces/<namespace>/items/<id>/files/<hash>=

删除资源hash与引用的关系.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/refile/namespaces/$namespace/items/$id/files/$hash"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/refile/namespaces/${namespace}/items/${id}/files/${hash}`, {
  method: 'DELETE'
})
#+END_SRC

**** remove references by item
=DELETE /refile/namespaces/<namespace>/items/<id>=

删除特定项目的全部引用.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/refile/namespaces/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/refile/namespaces/${namespace}/items/${id}`, {
  method: 'DELETE'
})
#+END_SRC

**** remove references by namespace
=DELETE /refile/namespaces/<namespace>=

删除特定命名空间下的全部引用.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/refile/namespaces/$namespace"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/refile/namespaces/${namespace}`, {
  method: 'DELETE'
})
#+END_SRC

**** get all namespaces
=GET /refile/namespaces=

获取所有命名空间.

返回 =Array<string>=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl 'http://localhost:8080/refile/namespaces'
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch('http://localhost:8080/refile/namespaces').then(res => res.json())
#+END_SRC

**** get all item ids
=GET /refile/namespaces/<namespace>/items=

获取特定命名空间下的所有项目id列表.

返回id列表 =Array<string>=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/refile/namespaces/$namespace/items"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/refile/namespaces/${namespace}/items`).then(res => res.json())
#+END_SRC

**** get file hashes by item
=GET /refile/namespaces/<namespace>/items/<id>/files=

获取与特定引用相关联的文件hash列表.

返回hash列表 =Array<string>=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/refile/namespaces/$namespace/items/$id/files"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/refile/namespace/${namespace}/items/${id}/files`).then(res => res.json())
#+END_SRC

**** get item ids by file
=GET /refile/files/<hash>/namespaces/<namespace>/items=

获取特定namespace下与特定文件相关的项目id列表.

返回id列表 =Array<string>=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/refile/files/$hash/namespaces/$namespace/items"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/refile/files/${hash}/namespaces/${namespace}/items`).then(res => res.json())
#+END_SRC

**** collect garbage
=POST /refile/gc=

执行垃圾回收:
- 引用数为0的文件会从文件系统中被删除.

***** Example
****** curl
#+BEGIN_SRC sh
curl 'http://localhost:8080/refile/gc'
#+END_SRC
       
****** JavaScript
#+BEGIN_SRC js
await fetch('http://localhost:8080/refile/gc', {
  method: 'POST'
})
#+END_SRC
